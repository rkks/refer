/* 
 *
 * The contents of this file are subject to the GNU Public License
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. 
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific terms governing rights and limitations
 * under the License.
 *
 * Developed by Michael Juntao Yuan 2002.
 *
 * */
package com.enterprisej2me.SmartPhrases.midp.MIDlets;
 
import java.util.*;
import java.io.*;
import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;
import com.enterprisej2me.SmartPhrases.midp.SearchUtils.*;

/** 
  * Example use of the GoogleAPI.GoogleSearch class in MIDP. 
  * Get your own Google query key and substitute the value in
  * string variable "licenseKey".
  */
 
public class Search extends MIDlet implements CommandListener {
 
  // All data members are "friendly" to classes in the same package
  // to allow view components to access application data and call back.
  Display display;

  Command exitCommand;
  Command menuCommand;
  Command backCommand;
  Command helpCommand;
  Command goCommand;

  Command smartCKCommand;
  Command wordSuggCommand;
  Command phraseSuggCommand; // For google suggestion
  Command phraseSuggCKCommand;
  List menuList; // listmode == 0
  List wordSuggList; // listmode == 1
  Command selectMenuCommand;
  Command selectSuggCommand;
  int listmode;

  Alert emptyQueryAlert;

  Command clearCommand; // clear cache
  TextField textField;

  /*
   * Google suggestion for a phrase.
   * Updated by the PhraseCheckTask.
   */
  String phraseSuggStr; 

  /*
   * Processed user input string
   * Used in display, for word CK and as cache index
   */
  String searchStr; 
  boolean isWord; 

  /*
   * Constructed google query
   * Generated by ProcessSearchStrings()
   */
  String googleStr; 

  GoogleSearch gs;
  DictionarySearch ds;

  public Search () throws Exception {
    // Initialize display and command objects.
    display = Display.getDisplay(this);

    exitCommand = new Command("EXIT", Command.SCREEN, 2);
    menuCommand = new Command("MENU", Command.SCREEN, 2);
    backCommand = new Command("BACK", Command.SCREEN, 2);
    helpCommand = new Command("HELP", Command.SCREEN, 2);

    goCommand = new Command("GO", Command.SCREEN, 1);
    smartCKCommand = new Command("GO", Command.SCREEN, 1);
    phraseSuggCKCommand = new Command("GO", Command.SCREEN, 1);
    wordSuggCommand = new Command("MORE", Command.SCREEN, 1);
    phraseSuggCommand = new Command("MORE", Command.SCREEN, 1);
    selectMenuCommand = new Command("SELECT", Command.SCREEN, 1);
    selectSuggCommand = new Command("SELECT", Command.SCREEN, 1);

    String [] menuItems = {"Dictionary",
                           "Usage Stat",
                           "Help",
                           "Clear history",
                           "Back",
                           "Exit"};
    menuList = new List ("Menu", List.IMPLICIT, menuItems, null);
    menuList.addCommand(selectMenuCommand);

    emptyQueryAlert = new Alert("Empty query");
    emptyQueryAlert.setString("Cannot check blank query. "
                      + "Please enter something ...");
    emptyQueryAlert.setTimeout(Alert.FOREVER);

    searchStr = null;
    googleStr = null;

    gs = new GoogleSearch ( getAppProperty("GoogleLicenseKey"),
                            getAppProperty("GoogleEndPoint") );
    ds = new DictionarySearch ( getAppProperty("DictionaryEndPoint") );
  }

  public Displayable getBackScreen () {
    Form form = new Form("Smart Phrases");
    form.append("Enter a phrase or a word:");
    textField = new TextField("", searchStr, 
                              80, TextField.ANY);
    form.append( textField );
    form.addCommand(menuCommand);
    form.addCommand(smartCKCommand);
 
    // The CommandListener is this MIDlet itself.
    form.setCommandListener( (CommandListener) this);
    return form;
  }

  public Displayable getHelpScreen () {
    String helpStr;
    try {
      Class c = this.getClass();
      InputStream is = c.getResourceAsStream("/help.txt");
      ByteArrayOutputStream bos = new ByteArrayOutputStream ();
      byte [] buf = new byte [256];
      while (true) {
        int rd = is.read (buf, 0, 256);
        if (rd == -1) break;
        bos.write (buf, 0, rd);
      }
      buf = bos.toByteArray ();
      helpStr = new String(buf);
      bos.close();
      is.close();
    } catch (Exception e) {
      helpStr = "Cannot find help file";
    }
    Form form = new Form("Help");
    form.append( helpStr );
    form.addCommand(backCommand);
    form.setCommandListener( (CommandListener) this);
    return form;
  }

  public void startApp() {
    SplashScreen splash = new SplashScreen ();
    splash.addCommand(helpCommand);
    splash.addCommand(goCommand);
    splash.setCommandListener( (CommandListener) this);
    display.setCurrent(splash);
  }

  public void pauseApp() {
  }
 
  public void destroyApp(boolean unconditional) {
  }
 
  public void commandAction(Command command, Displayable screen) {
    if (command == exitCommand) {
      destroyApp(false);
      notifyDestroyed();

    } else if ( command == goCommand ) {
      searchStr = "";
      display.setCurrent( getBackScreen() );

    } else if (command == backCommand) {
      display.setCurrent( getBackScreen () );

    } else if (command == helpCommand) {
      display.setCurrent( getHelpScreen() );

    } else if (command == menuCommand) { 
      listmode = 0;
      menuList.setCommandListener( (CommandListener) this);
      display.setCurrent( menuList );

    } else if (command == smartCKCommand) {
      try {
        processSearchStrings( textField.getString() );
        if ( searchStr.equals("") ) {
          display.setCurrent(emptyQueryAlert, getBackScreen());
          return;
        }
        if (isWord ) {
          WordCheckTask t = new WordCheckTask (this);
          t.go();
        } else {
          PhraseCheckTask t = new PhraseCheckTask (this);
          t.go();
        }
      } catch (Exception e) {
        e.printStackTrace();
      }

    } else if (command == phraseSuggCKCommand) {
      try {
        processSearchStrings( phraseSuggStr );
        PhraseCheckTask t = new PhraseCheckTask (this);
        t.go();
      } catch (Exception e) {
        e.printStackTrace();
      }

    } else if (command == phraseSuggCommand) {
      try {
        PhraseSuggTask t = new PhraseSuggTask (this);
        t.go();
 
      } catch (Exception e) {
        e.printStackTrace();
      }

    } else if (command == wordSuggCommand) {
      try {
        listmode = 1;
        WordSuggTask t = new WordSuggTask (this);
        t.go();
      } catch (Exception e) {
        e.printStackTrace();
      }

    } else if ( command == selectSuggCommand ||
         (command == List.SELECT_COMMAND && listmode == 1) ) {
      try {
        processSearchStrings( 
          wordSuggList.getString(wordSuggList.getSelectedIndex()));
        WordCheckTask t = new WordCheckTask (this);
        t.go();
 
      } catch (Exception e) {
        e.printStackTrace();
      }

    } else if ( command == selectMenuCommand ||
         (command == List.SELECT_COMMAND && listmode == 0) ) {
      if (menuList.getSelectedIndex() == 0) {
        // Dictionary search
        try {
          processSearchStrings( textField.getString() );
          if ( searchStr.equals("") ) {
            display.setCurrent(emptyQueryAlert, getBackScreen());
            return;
          }
          WordCheckTask t = new WordCheckTask (this);
          t.go();
        } catch (Exception e) {
          e.printStackTrace();
        }
      } else if (menuList.getSelectedIndex() == 1) {
        // Google search
        try {
          processSearchStrings( textField.getString() );
          if ( searchStr.equals("") ) {
            display.setCurrent(emptyQueryAlert, getBackScreen());
            return;
          }
          PhraseCheckTask t = new PhraseCheckTask (this);
          t.go();
        } catch (Exception e) {
          e.printStackTrace();
        }
      } else if (menuList.getSelectedIndex() == 2) {
        display.setCurrent( getHelpScreen() );

      } else if (menuList.getSelectedIndex() == 3) {
        // Clear cache
        searchStr = "";
        try {
          ClearTask t = new ClearTask (this);
          t.go();
        } catch (Exception e) {
          e.printStackTrace();
        }
      } else if (menuList.getSelectedIndex() == 4) {
        display.setCurrent( getBackScreen () );

      } else if (menuList.getSelectedIndex() == 5) {
        // exit
        destroyApp(false);
        notifyDestroyed();
      }

    } else {
      // Do nothing.
    }
  }

  // Generate a "searchStr" string
  // and a corresponding "googleStr" string from input.
  private void processSearchStrings (String s) {
    isWord = true;
    String raw = s.trim();
    StringBuffer buf1 = new StringBuffer();
    buf1.append("\"");
    StringBuffer buf2 = new StringBuffer();
    int spaceIndex = 0;
    int prevIndex = -1;
    while ( (spaceIndex = raw.indexOf(' ', prevIndex+1)) != -1 ) {
      if ( spaceIndex != prevIndex + 1 ) {
        buf1.append("+"
                    + raw.substring(prevIndex+1, spaceIndex)
                    + " ");
        buf2.append(raw.substring(prevIndex+1, spaceIndex)
                    + " ");
        // This searchStr contains multiple words.
        isWord = false;
      }
      prevIndex = spaceIndex;
    }
    buf1.append ("+" + raw.substring(prevIndex+1));
    buf1.append("\"");
    buf2.append (raw.substring(prevIndex+1));

    this.googleStr = buf1.toString();
    this.searchStr = buf2.toString();

    return;
  }

}
