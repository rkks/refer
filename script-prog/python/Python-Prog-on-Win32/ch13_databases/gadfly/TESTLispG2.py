

def GRAMMAR():


   # ******************************BEGIN RECONSTRUCTION
   # Python declaration of Grammar variable LispG.
   # automatically generated by module kjParser.
   # Altering this sequence by hand will probably
   # leave it unusable.
   #
   import kjParser

   # variable declaration:
   LispG= kjParser.NullGrammar()



   # case sensitivity behavior for keywords.
   LispG.SetCaseSensitivity(1)


   # declaration of lexical dictionary.
   # EXCEPT FOR TERMINALS
   LispG.LexD.punctuationlist = '().'
   # now comment patterns
   LispG.LexD.comment(';.*')
   # now define tokens
   LispG.IndexToToken[0] = LispG.LexD.keyword('(')
   LispG.IndexToToken[1] = LispG.LexD.keyword('setq')
   LispG.IndexToToken[2] = kjParser.termrep('*')
   LispG.IndexToToken[3] = kjParser.termrep('int')
   LispG.IndexToToken[4] = LispG.LexD.keyword(')')
   LispG.IndexToToken[5] = kjParser.nonterminal('ListTail')
   LispG.IndexToToken[6] = kjParser.nonterminal('Value')
   LispG.IndexToToken[7] = kjParser.termrep('str')
   LispG.IndexToToken[8] = kjParser.termrep('var')


   # declaration of rule list with names.
   # EXCEPT FOR INTERP FUNCTIONS
   LispG.RuleL = [None] * 7
   rule = kjParser.ParseRule((-7, 'Value'), [(-6, '('), (-6, 'setq'), (-8, 'var'), (-7, 'Value'), (-6, ')')])
   name = 'SetqRule'
   rule.Name = name
   LispG.RuleL[0] = rule
   LispG.RuleNameToIndex[name] = 0
   rule = kjParser.ParseRule((-7, 'Value'), [(-6, '('), (-7, 'ListTail')])
   name = 'ListRule'
   rule.Name = name
   LispG.RuleL[1] = rule
   LispG.RuleNameToIndex[name] = 1
   rule = kjParser.ParseRule((-7, 'ListTail'), [(-7, 'Value'), (-7, 'ListTail')])
   name = 'TailFull'
   rule.Name = name
   LispG.RuleL[2] = rule
   LispG.RuleNameToIndex[name] = 2
   rule = kjParser.ParseRule((-7, 'ListTail'), [(-6, ')')])
   name = 'TailEmpty'
   rule.Name = name
   LispG.RuleL[3] = rule
   LispG.RuleNameToIndex[name] = 3
   rule = kjParser.ParseRule((-7, 'Value'), [(-8, 'var')])
   name = 'Varrule'
   rule.Name = name
   LispG.RuleL[4] = rule
   LispG.RuleNameToIndex[name] = 4
   rule = kjParser.ParseRule((-7, 'Value'), [(-8, 'int')])
   name = 'Intrule'
   rule.Name = name
   LispG.RuleL[5] = rule
   LispG.RuleNameToIndex[name] = 5
   rule = kjParser.ParseRule((-7, 'Value'), [(-8, 'str')])
   name = 'Strrule'
   rule.Name = name
   LispG.RuleL[6] = rule
   LispG.RuleNameToIndex[name] = 6


   # DFA root nonterminal.
   LispG.DFA.root_nonTerminal =(-7, 'Value')


   # DFA state declarations.
   LispG.DFA.States[1] = [-5]
   LispG.DFA.States[2] = [-5]
   LispG.DFA.States[3] = [-5]
   LispG.DFA.States[4] = [-5]
   LispG.DFA.States[5] = [-5]
   LispG.DFA.States[6] = [-5]
   LispG.DFA.States[7] = [-5]
   LispG.DFA.States[8] = [-5]
   LispG.DFA.States[9] = [-5]
   LispG.DFA.States[10] = [-5]
   LispG.DFA.States[11] = [-5]
   LispG.DFA.States[12] = [-5]
   LispG.DFA.States[13] = [-5]
   LispG.DFA.States[14] = [-5]
   LispG.DFA.maxState = 14


   # DFA transition declarations.
   LispG.DFA.SetReduction(6,LispG.IndexToToken[8],4)
   LispG.DFA.SetReduction(8,LispG.IndexToToken[3],3)
   LispG.DFA.SetMap(7,LispG.IndexToToken[8],11)
   LispG.DFA.SetReduction(4,LispG.IndexToToken[8],5)
   LispG.DFA.SetMap(5,LispG.IndexToToken[8],6)
   LispG.DFA.SetReduction(10,LispG.IndexToToken[4],1)
   LispG.DFA.SetMap(5,LispG.IndexToToken[1],7)
   LispG.DFA.SetMap(11,LispG.IndexToToken[0],5)
   LispG.DFA.SetReduction(10,LispG.IndexToToken[8],1)
   LispG.DFA.SetReduction(6,LispG.IndexToToken[4],4)
   LispG.DFA.SetReduction(14,LispG.IndexToToken[7],0)
   LispG.DFA.SetReduction(10,LispG.IndexToToken[0],1)
   LispG.DFA.SetReduction(4,LispG.IndexToToken[2],5)
   LispG.DFA.SetMap(11,LispG.IndexToToken[6],13)
   LispG.DFA.SetReduction(6,LispG.IndexToToken[3],4)
   LispG.DFA.SetReduction(4,LispG.IndexToToken[0],5)
   LispG.DFA.SetReduction(10,LispG.IndexToToken[7],1)
   LispG.DFA.SetReduction(2,LispG.IndexToToken[4],6)
   LispG.DFA.SetMap(9,LispG.IndexToToken[7],2)
   LispG.DFA.SetReduction(2,LispG.IndexToToken[2],6)
   LispG.DFA.SetReduction(8,LispG.IndexToToken[7],3)
   LispG.DFA.SetReduction(2,LispG.IndexToToken[0],6)
   LispG.DFA.SetReduction(12,LispG.IndexToToken[7],2)
   LispG.DFA.SetMap(1,LispG.IndexToToken[0],5)
   LispG.DFA.SetReduction(6,LispG.IndexToToken[7],4)
   LispG.DFA.SetMap(5,LispG.IndexToToken[6],9)
   LispG.DFA.SetReduction(14,LispG.IndexToToken[4],0)
   LispG.DFA.SetReduction(14,LispG.IndexToToken[0],0)
   LispG.DFA.SetMap(13,LispG.IndexToToken[4],14)
   LispG.DFA.SetReduction(12,LispG.IndexToToken[4],2)
   LispG.DFA.SetReduction(14,LispG.IndexToToken[2],0)
   LispG.DFA.SetReduction(12,LispG.IndexToToken[2],2)
   LispG.DFA.SetReduction(12,LispG.IndexToToken[0],2)
   LispG.DFA.SetReduction(8,LispG.IndexToToken[2],3)
   LispG.DFA.SetMap(1,LispG.IndexToToken[7],2)
   LispG.DFA.SetReduction(10,LispG.IndexToToken[2],1)
   LispG.DFA.SetMap(5,LispG.IndexToToken[7],2)
   LispG.DFA.SetMap(9,LispG.IndexToToken[4],8)
   LispG.DFA.SetReduction(8,LispG.IndexToToken[4],3)
   LispG.DFA.SetMap(9,LispG.IndexToToken[0],5)
   LispG.DFA.SetMap(5,LispG.IndexToToken[5],10)
   LispG.DFA.SetReduction(8,LispG.IndexToToken[0],3)
   LispG.DFA.SetMap(9,LispG.IndexToToken[6],9)
   LispG.DFA.SetReduction(4,LispG.IndexToToken[3],5)
   LispG.DFA.SetMap(5,LispG.IndexToToken[3],4)
   LispG.DFA.SetMap(11,LispG.IndexToToken[8],6)
   LispG.DFA.SetMap(1,LispG.IndexToToken[3],4)
   LispG.DFA.SetReduction(12,LispG.IndexToToken[8],2)
   LispG.DFA.SetReduction(2,LispG.IndexToToken[3],6)
   LispG.DFA.SetReduction(8,LispG.IndexToToken[8],3)
   LispG.DFA.SetReduction(6,LispG.IndexToToken[2],4)
   LispG.DFA.SetReduction(14,LispG.IndexToToken[3],0)
   LispG.DFA.SetMap(9,LispG.IndexToToken[8],6)
   LispG.DFA.SetReduction(6,LispG.IndexToToken[0],4)
   LispG.DFA.SetMap(5,LispG.IndexToToken[4],8)
   LispG.DFA.SetReduction(4,LispG.IndexToToken[4],5)
   LispG.DFA.SetMap(5,LispG.IndexToToken[0],5)
   LispG.DFA.SetMap(11,LispG.IndexToToken[3],4)
   LispG.DFA.SetMap(1,LispG.IndexToToken[8],6)
   LispG.DFA.SetReduction(12,LispG.IndexToToken[3],2)
   LispG.DFA.SetReduction(2,LispG.IndexToToken[8],6)
   LispG.DFA.SetReduction(4,LispG.IndexToToken[7],5)
   LispG.DFA.SetMap(11,LispG.IndexToToken[7],2)
   LispG.DFA.SetMap(9,LispG.IndexToToken[5],12)
   LispG.DFA.SetReduction(14,LispG.IndexToToken[8],0)
   LispG.DFA.SetMap(9,LispG.IndexToToken[3],4)
   LispG.DFA.SetReduction(10,LispG.IndexToToken[3],1)
   LispG.DFA.SetReduction(2,LispG.IndexToToken[7],6)


   # Clean up the grammar.
   LispG.CleanUp()


   # return the grammar.
   return LispG


   # WARNINGS ****************************** 
   # You must bind the following rule names 
   # to reduction interpretation functions 
   # LispG.Bind('SetqRule', ??function??)
   # LispG.Bind('ListRule', ??function??)
   # LispG.Bind('TailFull', ??function??)
   # LispG.Bind('TailEmpty', ??function??)
   # LispG.Bind('Varrule', ??function??)
   # LispG.Bind('Intrule', ??function??)
   # LispG.Bind('Strrule', ??function??)
   #(last rule)


   # WARNINGS ****************************** 
   # You must bind the following terminals 
   # to regular expressions and interpretation functions 
   # LispG.Addterm('int', ??regularExp??, ??function??)
   # LispG.Addterm('str', ??regularExp??, ??function??)
   # LispG.Addterm('var', ??regularExp??, ??function??)
   #(last terminal)
   # ******************************END RECONSTRUCTION
