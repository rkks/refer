##############################################################################
##   Code fragment (Recommended) from Chapter 15 of "Perl Best Practices"   ##
##     Copyright (c) O'Reilly & Associates, 2005. All Rights Reserved.      ##
##  See: http://www.oreilly.com/pub/a/oreilly/ask_tim/2001/codepolicy.html  ##
##############################################################################


# Standard modules...
use strict;
use warnings;
use IO::Prompt;
use Carp;
use English qw( -no_match_vars );
use Data::Alias;
use Readonly;


package Num::Fuzzy;
use charnames qw( :full );
{
    use overload (
        # Ignore the error range when converting to a number...
        q{0+}   => sub { 
            my ($self) = @_;
            return $self->get_value();
        },
 
        # Only true if the range of possible values doesn't include zero...
        q{bool} => sub { 
            my ($self) = @_;
            return ! $self->range_includes(0);
        },
 
        # Convert to string using the as_str() method...
        q{""} => sub { 
            my ($self) = @_;
            return $self->get_value() 
                   . "\N{PLUS-MINUS SIGN}" 
                   . $self->get_fuzziness();
        },
 
        # Use Perl standard behaviours for other operations...
        fallback => 1,
    );
 
    # etc.
}

