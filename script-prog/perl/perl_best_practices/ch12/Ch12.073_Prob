##############################################################################
## Code fragment (NOT RECOMMENDED) from Chapter 12 of "Perl Best Practices" ##
##     Copyright (c) O'Reilly & Associates, 2005. All Rights Reserved.      ##
##  See: http://www.oreilly.com/pub/a/oreilly/ask_tim/2001/codepolicy.html  ##
##############################################################################


# Standard modules...
use strict;
use warnings;
use IO::Prompt;
use Carp;
use English qw( -no_match_vars );
use Data::Alias;
use Readonly;

Readonly my $IDENT   => qr/\s* [_A-Za-z]\w+/xms;
Readonly my $KEYWORD => qr/\s* (?: get | put | set ) /xms;
Readonly my $BLOCK   => qr/\s* [{] [.]{3} [}] \s* /xms;

my $input = <<'END_INPUT';
set foo {...}
get bar {...}
put baz {...}
END_INPUT

my @tokens;

while (length $input > 0) {
    if ($input =~ s{\A ($KEYWORD)}{}xms) {
        my $keyword = $1;
        push @tokens, start_cmd($keyword);
    } 
    elsif ($input =~ s{\A ($IDENT)}{}xms) {
        my $ident = $1;
        push @tokens, make_ident($ident);
    }
    elsif ($input =~ s{\A ($BLOCK)}{}xms) {
        my $block = $1;
        push @tokens, make_block($block);
    }
    else {
        my ($context) = $input =~ m/ \A ([^\n]*) /xms;
        croak "Error near: $context";
    }
}


sub start_cmd { 
    my ($token) = @_;
    print "Start cmd: $token\n";
    return $token;
}

sub make_ident { 
    my ($token) = @_;
    print "Make ident: $token\n";
    return $token;
}

sub make_block { 
    my ($token) = @_;
    print "Make block: $token\n";
    return $token;
}
