##############################################################################
##   Code fragment (Recommended) from Chapter 12 of "Perl Best Practices"   ##
##     Copyright (c) O'Reilly & Associates, 2005. All Rights Reserved.      ##
##  See: http://www.oreilly.com/pub/a/oreilly/ask_tim/2001/codepolicy.html  ##
##############################################################################


# Standard modules...
use strict;
use warnings;
use IO::Prompt;
use Carp;
use English qw( -no_match_vars );
use Data::Alias;
use Readonly;

Readonly my $IDENT   => qr/\s* [_A-Za-z]\w+/xms;
Readonly my $KEYWORD => qr/\s* (?: get | put | set ) /xms;
Readonly my $BLOCK   => qr/\s* [{] [.]{3} [}] \s* /xms;

my $input = <<'END_INPUT';
set foo {...}
get bar {...}
put baz {...}
END_INPUT

my @tokens;

pos $input = 0;

while (pos $input < length $input) {
    push @tokens,  (
                       # For token type...      #  Build token...  
             $input =~ m{ \G ($KEYWORD) }gcxms  ?  start_cmd($1)
           : $input =~ m{ \G ( $IDENT ) }gcxms  ?  make_ident($1)
           : $input =~ m{ \G ( $BLOCK ) }gcxms  ?  make_block($1)
           : $input =~ m{ \G ( [^\n]* ) }gcxms  ?  croak "Error near:$1"
           :                                       die 'Internal error'
    );
}



sub start_cmd { 
    my ($token) = @_;
    print "Start cmd: $token\n";
    return $token;
}

sub make_ident { 
    my ($token) = @_;
    print "Make ident: $token\n";
    return $token;
}

sub make_block { 
    my ($token) = @_;
    print "Make block: $token\n";
    return $token;
}
