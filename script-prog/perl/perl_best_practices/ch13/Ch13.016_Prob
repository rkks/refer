##############################################################################
## Code fragment (NOT RECOMMENDED) from Chapter 13 of "Perl Best Practices" ##
##     Copyright (c) O'Reilly & Associates, 2005. All Rights Reserved.      ##
##  See: http://www.oreilly.com/pub/a/oreilly/ask_tim/2001/codepolicy.html  ##
##############################################################################


# Standard modules...
use strict;
use warnings;
use IO::Prompt;
use Carp;
use English qw( -no_match_vars );
use Data::Alias;
use Readonly;

Readonly my $MAX_TRIES => 3;
sub acquire_resource { return; }
sub fibonacci {
    my ($n) = @_;
    return 1 if $n < 2;
    return fibonacci($n-1) + fibonacci($n-2);
}
sub nap {
    sleep @_;
}
my $resource;
my $resource_id;

TRY:
for my $try (1..$MAX_TRIES) {
    # Take care of locking of, and connection to, resource...
    $resource = acquire_resource($resource_id);
 
    # Got it...
    last TRY if defined $resource;
 
    # Report non-recoverable failure if no more tries
    croak 'Could not acquire resource' if $try == $MAX_TRIES;
 
    # Else wait for increasing random intervals to help resolve contention...
    nap( rand fibonacci($try) ); 
}
 
do_something_using($resource);

