##############################################################################
##   Code fragment (Recommended) from Chapter 13 of "Perl Best Practices"   ##
##     Copyright (c) O'Reilly & Associates, 2005. All Rights Reserved.      ##
##  See: http://www.oreilly.com/pub/a/oreilly/ask_tim/2001/codepolicy.html  ##
##############################################################################


# Standard modules...
use strict;
use warnings;
use IO::Prompt;
use Carp;
use English qw( -no_match_vars );
use Data::Alias;
use Readonly;

sub get_next_line {
    croak X::EOF->new({});
}

sub try_next_line {
    # Give get_next_line() two chances...
    for my $already_retried (0..1) {
 
        # Return immediately on success, but catch any failure...
        eval { 
            return get_next_line() 
        };
    
        # Rethrow the caught exception if it isn't an EOF problem...
        croak( $EVAL_ERROR )
            if !X::EOF->caught();
 
        # Also rethrow the caught exception 
        # if we've already tried rewinding the filehandle...
        croak( $EVAL_ERROR )
            if $already_retried;
 
        # Otherwise, try rewinding the filehandle...
        seek $EVAL_ERROR->handle(), 0, 0;
    }
}

try_next_line();


package X::EOF;

sub new {
    my ($class, $data) = @_;
    return bless $data, $class;
}

sub caught {
    return 1;
}

sub handle {
    return \*STDIN;
}
