##############################################################################
##   Code fragment (Recommended) from Chapter 13 of "Perl Best Practices"   ##
##     Copyright (c) O'Reilly & Associates, 2005. All Rights Reserved.      ##
##  See: http://www.oreilly.com/pub/a/oreilly/ask_tim/2001/codepolicy.html  ##
##############################################################################


# Standard modules...
use strict;
use warnings;
use IO::Prompt;
use Carp;
use English qw( -no_match_vars );
use Data::Alias;
use Readonly;


Readonly my @DATA_DIRS => ( '.' );

# Find and open a file by name, returning the filehandle
# or throwing an exception on failure...
sub locate_and_open {
    my ($filename) = @_;
 
    # Check acceptable directories in order...
    for my $dir (@DATA_DIRS) {
        my $path = "$dir/$filename";
 
        # If file exists in an acceptable directory, open and return it...
        if (-r $path) {
            open my $fh, '<', $path
                or croak( "Located $filename at $path, but could not open");
            return $fh;
        }
    }
 
    # Fail if all possible locations tried without success...
    croak( "Could not locate $filename" );
}
 
my @directory_path = ( 'ZZ2ZA' );

for my $filename (@directory_path) {
    # Just ignore any source files that don't load...
    eval {
        my $fh = locate_and_open($filename);
        my $head = load_header_from($fh);
        print $head;
    }
}

