##############################################################################
##   Code fragment (Recommended) from Chapter 13 of "Perl Best Practices"   ##
##     Copyright (c) O'Reilly & Associates, 2005. All Rights Reserved.      ##
##  See: http://www.oreilly.com/pub/a/oreilly/ask_tim/2001/codepolicy.html  ##
##############################################################################


# Standard modules...
use strict;
use warnings;
use IO::Prompt;
use Carp;
use English qw( -no_match_vars );
use Data::Alias;
use Readonly;

sub get_number {
    croak X::TooBig->new({value=>10, range=>[1,9]});
}

# Get the next number...
my $value = eval { get_number() };
 
# If the attempt fails...
if ($EVAL_ERROR) {
    # If the candidate was considered too big, go with the maximum allowed...
    if ( X::TooBig->caught() ) {
        my @range = $EVAL_ERROR->get_range();
        $value = $range[-1];
    }
    # If the candidate was deemed too small, try it anyway...
    elsif ( X::TooSmall->caught() ) {
        $value = $EVAL_ERROR->get_value();
    }
    # Otherwise, rethrow the exception...
    else {
        croak( $EVAL_ERROR );
    }
}

use Data::Dumper 'Dumper';
warn Dumper [ $value ];

package X::TooBig;

sub new {
    my ($class, $data) = @_;
    return bless $data, $class;
}

sub caught {
    my ($what) = @_;
    return $what->isa(__PACKAGE__);
}

sub get_range {
    my ($self) = @_;
    return @{$self->{range}};
}

use overload (
    q{""} => sub {
        my ($self) = @_;
        return "$self->{value} not in ($self->{range}[0]..$self->{range}[-1])";
    },
);


