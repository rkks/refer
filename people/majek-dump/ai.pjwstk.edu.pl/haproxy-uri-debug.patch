diff -raup haproxy-ss-20080329/doc/configuration.txt haproxy-ss-20080329-uri/doc/configuration.txt
--- haproxy-ss-20080329/doc/configuration.txt	2008-03-28 18:19:05.000000000 +0100
+++ haproxy-ss-20080329-uri/doc/configuration.txt	2008-04-12 17:33:04.000000000 +0200
@@ -744,6 +744,15 @@ balance <algorithm> [ <arguments> ]
                   that changing a server's weight on the fly will have no
                   effect.
 
+                  This algorithm can take two parameters 'len' and 'depth', both
+                  followed by positive integer number.
+                  'len' says, that the alogrithm should stop counting hash after
+                        n-th character in the uri
+                  'depth' informs that only first X directories should be used
+                        to count the hash
+                  Those options can be helpful when you want to balance servers
+                  based on the beginning of the uri.
+
       url_param   The URL parameter specified in argument will be looked up in
                   the query string of each HTTP request. If it is found
                   followed by an equal sign ('=') and a value, then the value
Only in haproxy-ss-20080329-uri: .fuse_hidden0000048a0000000a
diff -raup haproxy-ss-20080329/include/proto/backend.h haproxy-ss-20080329-uri/include/proto/backend.h
--- haproxy-ss-20080329/include/proto/backend.h	2008-03-28 18:19:05.000000000 +0100
+++ haproxy-ss-20080329-uri/include/proto/backend.h	2008-04-15 12:26:54.000000000 +0200
@@ -27,6 +27,7 @@
 #include <types/backend.h>
 #include <types/session.h>
 
+#include <proto/log.h>
 #include <proto/queue.h>
 
 int assign_server(struct session *s);
@@ -155,25 +156,46 @@ static inline struct server *get_server_
  * algorithm out of a tens because it gave him the best results.
  *
  */
-static inline struct server *get_server_uh(struct proxy *px, char *uri, int uri_len)
+static inline struct server *get_server_uh(struct proxy *px, char *uri_str, int uri_len)
 {
 	unsigned long hash = 0;
 	int c;
+	int slashes = 0;
+	int len;
+	char *uri;
 
 	if (px->lbprm.tot_weight == 0)
 		return NULL;
 
 	if (px->lbprm.map.state & PR_MAP_RECALC)
 		recalc_server_map(px);
-
-	while (uri_len--) {
+	
+	if(px->uri_len_limit)
+		len = MIN(uri_len, px->uri_len_limit);
+	else
+		len = uri_len;
+	
+	uri = uri_str;
+	
+	while (len--) {
 		c = *uri++;
-		if (c == '?')
+		if (c == '/'){
+			slashes++;
+			if(slashes == px->uri_dirs_depth){
+				break;
+			}
+		}
+		else if (c == '?')
 			break;
+		
 		hash = c + (hash << 6) + (hash << 16) - hash;
 	}
+	hash = hash % px->lbprm.tot_weight;
+	
+	Warning( "used_uri=\"%.*s\" hash=%02i orig_uri:\"%.*s\" depth=%i length=%i\n", \
+		(uri - uri_str), uri_str, hash, uri_len, uri_str, px->uri_len_limit, px->uri_dirs_depth);
 
-	return px->lbprm.map.srv[hash % px->lbprm.tot_weight];
+	return px->lbprm.map.srv[hash];
 }
 
 
diff -raup haproxy-ss-20080329/include/types/proxy.h haproxy-ss-20080329-uri/include/types/proxy.h
--- haproxy-ss-20080329/include/types/proxy.h	2008-03-28 18:19:05.000000000 +0100
+++ haproxy-ss-20080329-uri/include/types/proxy.h	2008-04-12 15:27:49.000000000 +0200
@@ -165,6 +165,8 @@ struct proxy {
 	int  cookie_len;			/* strlen(cookie_name), computed only once */
 	char *url_param_name;			/* name of the URL parameter used for hashing */
 	int  url_param_len;			/* strlen(url_param_name), computed only once */
+	int  uri_len_limit;			/* character limit for uri balancing algorithm */
+	int  uri_dirs_depth;			/* directories(slashes) limit for uri balancing algorithm */
 	char *appsession_name;			/* name of the cookie to look for */
 	int  appsession_name_len;		/* strlen(appsession_name), computed only once */
 	int  appsession_len;			/* length of the appsession cookie value to be used */
diff -raup haproxy-ss-20080329/src/backend.c haproxy-ss-20080329-uri/src/backend.c
--- haproxy-ss-20080329/src/backend.c	2008-03-28 18:19:05.000000000 +0100
+++ haproxy-ss-20080329-uri/src/backend.c	2008-04-12 17:39:49.000000000 +0200
@@ -604,7 +604,7 @@ static void fwrr_queue_srv(struct server
 		 * lower the scale, the rougher the weights modulation, and the
 		 * higher the scale, the lower the number of servers without
 		 * overflow. With this formula, the result is always positive,
-		 * so we can use eb3é_insert().
+		 * so we can use eb3ï¿½_insert().
 		 */
 		s->lb_node.key = SRV_UWGHT_RANGE * s->npos +
 			(unsigned)(SRV_EWGHT_MAX + s->rweight - s->eweight) / BE_WEIGHT_SCALE;
@@ -1845,6 +1845,8 @@ int be_downtime(struct proxy *px) {
  */
 int backend_parse_balance(const char **args, char *err, int errlen, struct proxy *curproxy)
 {
+	int i;
+	
 	if (!*(args[0])) {
 		/* if no option is set, use round-robin by default */
 		curproxy->lbprm.algo &= ~BE_LB_ALGO;
@@ -1867,6 +1869,28 @@ int backend_parse_balance(const char **a
 	else if (!strcmp(args[0], "uri")) {
 		curproxy->lbprm.algo &= ~BE_LB_ALGO;
 		curproxy->lbprm.algo |= BE_LB_ALGO_UH;
+		for(i=1; i < 5; i+=2){
+			if (!*args[i])
+				break;
+			if(!strcmp(args[i], "len")){
+				if(!*args[i+1] || (atoi(args[i+1]) <= 0) ){
+					snprintf(err, errlen, "'balance uri len' accepts only positive integer as parameter. got %s.", args[i+1]);
+					return -1;
+				}
+				curproxy->uri_len_limit = atoi(args[i+1]) + 1; /* all urls start with / :P */
+			}
+			else if (!strcmp(args[i], "depth")){
+				if(!*args[i+1] || (atoi(args[i+1]) <= 0) ){
+					snprintf(err, errlen, "'balance uri depth' accepts only positive integer as parameter. got %s.", args[i+1]);
+					return -1;
+				}
+				curproxy->uri_dirs_depth = atoi(args[i+1]) + 1; /* all urls start with / :P */
+			}
+			else{
+				snprintf(err, errlen, "'balance uri' accepts only parameters 'len' and 'depth'. %s is given.", args[i+1]);
+				return -1;
+			}
+		}
 	}
 	else if (!strcmp(args[0], "url_param")) {
 		if (!*args[1]) {
